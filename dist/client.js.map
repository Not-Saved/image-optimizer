{"version":3,"sources":["../src/client.ts"],"sourcesContent":["import {\n  ImageConfig,\n  ImageConfigComplete,\n  ImageLoaderProps,\n} from \"./client/types\";\n\n// Do not export - this is an internal type only\n// because `next.config.js` is only meant for the\n// built-in loaders, not for a custom loader() prop.\ntype ImageLoaderWithConfig = (\n  p: ImageLoaderProps & {\n    config: Readonly<ImageConfig>;\n  }\n) => string;\n\nexport type GenImgAttrsData = {\n  config: ImageConfig;\n  src: string;\n  unoptimized: boolean;\n  loader: ImageLoaderWithConfig;\n  width?: number;\n  quality?: number;\n  sizes?: string;\n};\n\nexport type GenImgAttrsResult = {\n  src: string;\n  srcSet: string | undefined;\n  sizes: string | undefined;\n};\n\nexport function generateImgAttrs({\n  config,\n  src,\n  unoptimized,\n  width,\n  quality,\n  sizes,\n  loader,\n}: GenImgAttrsData): GenImgAttrsResult {\n  if (unoptimized) {\n    return { src, srcSet: undefined, sizes: undefined };\n  }\n\n  const { widths, kind } = getWidths(\n    {\n      deviceSizes: config.deviceSizes || [],\n      imageSizes: config.imageSizes || [],\n    },\n    width,\n    sizes\n  );\n  const last = widths.length - 1;\n\n  return {\n    sizes: !sizes && kind === \"w\" ? \"100vw\" : sizes,\n    srcSet: widths\n      .map(\n        (w, i) =>\n          `${loader({ config, src, quality, width: w })} ${\n            kind === \"w\" ? w : i + 1\n          }${kind}`\n      )\n      .join(\", \"),\n\n    // It's intended to keep `src` the last attribute because React updates\n    // attributes in order. If we keep `src` the first one, Safari will\n    // immediately start to fetch `src`, before `sizes` and `srcSet` are even\n    // updated by React. That causes multiple unnecessary requests if `srcSet`\n    // and `sizes` are defined.\n    // This bug cannot be reproduced in Chrome or Firefox.\n    src: loader({ config, src, quality, width: widths[last] }),\n  };\n}\n\nfunction getWidths(\n  { deviceSizes, imageSizes }: { deviceSizes: number[]; imageSizes: number[] },\n  width: number | undefined,\n  sizes?: string\n): { widths: number[]; kind: \"w\" | \"x\" } {\n  const allSizes = [...deviceSizes, ...imageSizes].sort((a, b) => a - b);\n\n  if (sizes) {\n    // Find all the \"vw\" percent sizes used in the sizes prop\n    const viewportWidthRe = /(^|\\s)(1?\\d?\\d)vw/g;\n    const percentSizes = [];\n    for (let match; (match = viewportWidthRe.exec(sizes)); match) {\n      percentSizes.push(parseInt(match[2]));\n    }\n    if (percentSizes.length) {\n      const smallestRatio = Math.min(...percentSizes) * 0.01;\n      return {\n        widths: allSizes.filter((s) => s >= deviceSizes[0] * smallestRatio),\n        kind: \"w\",\n      };\n    }\n    return { widths: allSizes, kind: \"w\" };\n  }\n  if (typeof width !== \"number\") {\n    return { widths: deviceSizes, kind: \"w\" };\n  }\n  let widths: number[] = [];\n  if (width) {\n    widths = [\n      ...new Set(\n        // > This means that most OLED screens that say they are 3x resolution,\n        // > are actually 3x in the green color, but only 1.5x in the red and\n        // > blue colors. Showing a 3x resolution image in the app vs a 2x\n        // > resolution image will be visually the same, though the 3x image\n        // > takes significantly more data. Even true 3x resolution screens are\n        // > wasteful as the human eye cannot see that level of detail without\n        // > something like a magnifying glass.\n        // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html\n        [width, width * 2 /*, width * 3*/].map(\n          (w) => allSizes.find((p) => p >= w) || allSizes[allSizes.length - 1]\n        )\n      ),\n    ];\n  }\n  return { widths, kind: \"x\" };\n}\n\nexport const imageConfigDefault: ImageConfigComplete = {\n  deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n  imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],\n  path: \"/api/image\",\n  unoptimized: false,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BO,SAAS,iBAAiB;AAAA,EAC/B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAuC;AACrC,MAAI,aAAa;AACf,WAAO,EAAE,KAAK,QAAQ,QAAW,OAAO,OAAU;AAAA,EACpD;AAEA,QAAM,EAAE,QAAQ,KAAK,IAAI;AAAA,IACvB;AAAA,MACE,aAAa,OAAO,eAAe,CAAC;AAAA,MACpC,YAAY,OAAO,cAAc,CAAC;AAAA,IACpC;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,QAAM,OAAO,OAAO,SAAS;AAE7B,SAAO;AAAA,IACL,OAAO,CAAC,SAAS,SAAS,MAAM,UAAU;AAAA,IAC1C,QAAQ,OACL;AAAA,MACC,CAAC,GAAG,MACF,GAAG,OAAO,EAAE,QAAQ,KAAK,SAAS,OAAO,EAAE,CAAC,CAAC,IAC3C,SAAS,MAAM,IAAI,IAAI,CACzB,GAAG,IAAI;AAAA,IACX,EACC,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQZ,KAAK,OAAO,EAAE,QAAQ,KAAK,SAAS,OAAO,OAAO,IAAI,EAAE,CAAC;AAAA,EAC3D;AACF;AAEA,SAAS,UACP,EAAE,aAAa,WAAW,GAC1B,OACA,OACuC;AACvC,QAAM,WAAW,CAAC,GAAG,aAAa,GAAG,UAAU,EAAE,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAErE,MAAI,OAAO;AAET,UAAM,kBAAkB;AACxB,UAAM,eAAe,CAAC;AACtB,aAAS,OAAQ,QAAQ,gBAAgB,KAAK,KAAK,GAAI,OAAO;AAC5D,mBAAa,KAAK,SAAS,MAAM,CAAC,CAAC,CAAC;AAAA,IACtC;AACA,QAAI,aAAa,QAAQ;AACvB,YAAM,gBAAgB,KAAK,IAAI,GAAG,YAAY,IAAI;AAClD,aAAO;AAAA,QACL,QAAQ,SAAS,OAAO,CAAC,MAAM,KAAK,YAAY,CAAC,IAAI,aAAa;AAAA,QAClE,MAAM;AAAA,MACR;AAAA,IACF;AACA,WAAO,EAAE,QAAQ,UAAU,MAAM,IAAI;AAAA,EACvC;AACA,MAAI,OAAO,UAAU,UAAU;AAC7B,WAAO,EAAE,QAAQ,aAAa,MAAM,IAAI;AAAA,EAC1C;AACA,MAAI,SAAmB,CAAC;AACxB,MAAI,OAAO;AACT,aAAS;AAAA,MACP,GAAG,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASL;AAAA,UAAC;AAAA,UAAO,QAAQ;AAAA;AAAA,QAAiB,EAAE;AAAA,UACjC,CAAC,MAAM,SAAS,KAAK,CAAC,MAAM,KAAK,CAAC,KAAK,SAAS,SAAS,SAAS,CAAC;AAAA,QACrE;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,SAAO,EAAE,QAAQ,MAAM,IAAI;AAC7B;AAEO,IAAM,qBAA0C;AAAA,EACrD,aAAa,CAAC,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,IAAI;AAAA,EACzD,YAAY,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,GAAG;AAAA,EAC9C,MAAM;AAAA,EACN,aAAa;AACf;","names":[]}